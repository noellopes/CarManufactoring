// <auto-generated />
using System;
using CarManufactoring.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarManufactoring.Migrations
{
    [DbContext(typeof(CarManufactoringContext))]
    [Migration("20230112085808_All")]
    partial class All
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarManufactoring.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("CarManufactoring.Models.Breakdown", b =>
                {
                    b.Property<int>("BreakdownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreakdownId"), 1L, 1);

                    b.Property<DateTime>("BreakdownDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BreakdownName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BreakdownNumber")
                        .HasColumnType("int");

                    b.Property<string>("MachineReplacement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MachineStop")
                        .HasColumnType("int");

                    b.Property<bool>("RepairInTheCompany")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReparationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BreakdownId");

                    b.ToTable("Breakdown");
                });

            modelBuilder.Entity("CarManufactoring.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"), 1L, 1);

                    b.Property<double>("BasePrice")
                        .HasColumnType("float");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LaunchYear")
                        .HasColumnType("int");

                    b.Property<int>("TimeProduction")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("BrandId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("CarManufactoring.Models.CarConfig", b =>
                {
                    b.Property<int>("CarConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarConfigId"), 1L, 1);

                    b.Property<double>("AddedPrice")
                        .HasColumnType("float");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<int>("NumExtras")
                        .HasColumnType("int");

                    b.HasKey("CarConfigId");

                    b.HasIndex("CarId");

                    b.ToTable("CarConfig");
                });

            modelBuilder.Entity("CarManufactoring.Models.CarModels", b =>
                {
                    b.Property<int>("CarModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarModelId"), 1L, 1);

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("CarModelId");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("CarManufactoring.Models.CarParts", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<decimal>("LevelService")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<double>("PointOfPurchase")
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("SafetyStock")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.ToTable("CarParts");
                });

            modelBuilder.Entity("CarManufactoring.Models.Collaborator", b =>
                {
                    b.Property<int>("CollaboratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollaboratorId"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("OnDuty")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("CollaboratorId");

                    b.HasIndex("GenderId");

                    b.HasIndex("TaskId");

                    b.ToTable("Collaborator");
                });

            modelBuilder.Entity("CarManufactoring.Models.CollaboratorShifts", b =>
                {
                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("CollaboratorShiftId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CollaboratorId", "ShiftId");

                    b.HasIndex("ShiftId");

                    b.ToTable("CollaboratorShifts");
                });

            modelBuilder.Entity("CarManufactoring.Models.ConfigList", b =>
                {
                    b.Property<int>("ConfigListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigListId"), 1L, 1);

                    b.Property<int>("CarConfigId")
                        .HasColumnType("int");

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.HasKey("ConfigListId");

                    b.HasIndex("CarConfigId");

                    b.HasIndex("ExtraId");

                    b.ToTable("ConfigList");
                });

            modelBuilder.Entity("CarManufactoring.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<DateTime>("CustomerFoundDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("CarManufactoring.Models.CustomerContact", b =>
                {
                    b.Property<int>("CustomerContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerContactId"), 1L, 1);

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("CustomerRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerContactId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContact");
                });

            modelBuilder.Entity("CarManufactoring.Models.Extra", b =>
                {
                    b.Property<int>("ExtraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExtraID"), 1L, 1);

                    b.Property<string>("DescExtra")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ExtraID");

                    b.ToTable("Extra");
                });

            modelBuilder.Entity("CarManufactoring.Models.Function", b =>
                {
                    b.Property<int>("FunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FunctionId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FunctionId");

                    b.ToTable("Function");
                });

            modelBuilder.Entity("CarManufactoring.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("GenderDefinition")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("CarManufactoring.Models.InspectionAndTest", b =>
                {
                    b.Property<int>("InspectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionId"), 1L, 1);

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductionsId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityTested")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("InspectionId");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("ProductionsId");

                    b.HasIndex("StateId");

                    b.ToTable("InspectionAndTest");
                });

            modelBuilder.Entity("CarManufactoring.Models.InspectionTestsProduction", b =>
                {
                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<int>("InspectionTestsProductionId")
                        .HasColumnType("int");

                    b.Property<string>("Lote")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("InspectionId", "ProductionId");

                    b.HasIndex("ProductionId");

                    b.ToTable("InspectionTestsProduction");
                });

            modelBuilder.Entity("CarManufactoring.Models.InspectionTestState", b =>
                {
                    b.Property<int>("InspectionTestStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionTestStateId"), 1L, 1);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("InspectionTestStateId");

                    b.ToTable("InspectionTestState");
                });

            modelBuilder.Entity("CarManufactoring.Models.LocalizationCar", b =>
                {
                    b.Property<int>("LocalizationCarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalizationCarId"), 1L, 1);

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalizationCarId");

                    b.ToTable("LocalizationCar");
                });

            modelBuilder.Entity("CarManufactoring.Models.LocalizationCode", b =>
                {
                    b.Property<int>("LocalizationCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalizationCodeId"), 1L, 1);

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("LocalizationCodeId");

                    b.ToTable("LocalizationCode");
                });

            modelBuilder.Entity("CarManufactoring.Models.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"), 1L, 1);

                    b.Property<DateTime?>("DateAcquired")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<int>("LocalizationCodeId")
                        .HasColumnType("int");

                    b.Property<int>("MachineModelId")
                        .HasColumnType("int");

                    b.Property<int>("MachineStateId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("MachineId");

                    b.HasIndex("LocalizationCodeId");

                    b.HasIndex("MachineModelId");

                    b.HasIndex("MachineStateId");

                    b.HasIndex("SectionId");

                    b.ToTable("Machine");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineAquisition", b =>
                {
                    b.Property<int>("MachineAquisitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineAquisitionID"), 1L, 1);

                    b.Property<string>("MachineAquisitionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<double>("MaintenancePrice")
                        .HasColumnType("float");

                    b.Property<double>("NextLevel")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("QuantityOfParts")
                        .HasColumnType("int");

                    b.HasKey("MachineAquisitionID");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineAquisition");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineBrand", b =>
                {
                    b.Property<int>("MachineBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineBrandId"), 1L, 1);

                    b.Property<string>("MachineBrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MachineBrandId");

                    b.ToTable("MachineBrand");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineBudget", b =>
                {
                    b.Property<int>("MachineBudgetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineBudgetID"), 1L, 1);

                    b.Property<int>("AquisitionId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.Property<double>("custoManutencao")
                        .HasColumnType("float");

                    b.Property<DateTime>("dataEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dataSolicitada")
                        .HasColumnType("datetime2");

                    b.Property<int>("prazoGarantia")
                        .HasColumnType("int");

                    b.HasKey("MachineBudgetID");

                    b.HasIndex("AquisitionId");

                    b.HasIndex("SupplierId");

                    b.ToTable("MachineBudget");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineMaintenance", b =>
                {
                    b.Property<int>("MachineMaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineMaintenanceId"), 1L, 1);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.HasKey("MachineMaintenanceId");

                    b.HasIndex("MachineId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("MachineMaintenance");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineModel", b =>
                {
                    b.Property<int>("MachineModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineModelId"), 1L, 1);

                    b.Property<int>("MachineBrandId")
                        .HasColumnType("int");

                    b.Property<string>("MachineModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MachineModelId");

                    b.HasIndex("MachineBrandId");

                    b.ToTable("MachineModel");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineState", b =>
                {
                    b.Property<int>("MachineStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineStateId"), 1L, 1);

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MachineStateId");

                    b.ToTable("MachineState");
                });

            modelBuilder.Entity("CarManufactoring.Models.MaintenanceCollaborator", b =>
                {
                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int");

                    b.Property<int>("MachineMaintenanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CollaboratorId", "MachineMaintenanceId");

                    b.HasIndex("MachineMaintenanceId");

                    b.ToTable("MaintenanceCollaborators");
                });

            modelBuilder.Entity("CarManufactoring.Models.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("MaterialId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("CarManufactoring.Models.MaterialUsed", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("SemiFinishedId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialUsedId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("MaterialId", "SemiFinishedId");

                    b.HasIndex("SemiFinishedId");

                    b.ToTable("MaterialUsed");
                });

            modelBuilder.Entity("CarManufactoring.Models.ModelParts", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CarConfigId")
                        .HasColumnType("int");

                    b.Property<int>("QtdPecas")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CarConfigId");

                    b.HasIndex("CarConfigId");

                    b.ToTable("ModelParts");
                });

            modelBuilder.Entity("CarManufactoring.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStateId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("CarManufactoring.Models.OrderState", b =>
                {
                    b.Property<int>("OrderStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStateId"), 1L, 1);

                    b.Property<string>("OrderStateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderStateId");

                    b.ToTable("OrderState");
                });

            modelBuilder.Entity("CarManufactoring.Models.PriceSupplierPartsCarParts", b =>
                {
                    b.Property<int>("PriceSupplierPartsCarPartsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceSupplierPartsCarPartsId"), 1L, 1);

                    b.Property<int>("Preco")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Promocao")
                        .HasColumnType("float");

                    b.Property<int>("SupplierPartsId")
                        .HasColumnType("int");

                    b.HasKey("PriceSupplierPartsCarPartsId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierPartsId");

                    b.ToTable("PriceSupplierPartsCarParts");
                });

            modelBuilder.Entity("CarManufactoring.Models.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PriorityId");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("CarManufactoring.Models.Production", b =>
                {
                    b.Property<int>("ProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionId"), 1L, 1);

                    b.Property<int>("CarConfigId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductionId");

                    b.HasIndex("CarConfigId");

                    b.ToTable("Production");
                });

            modelBuilder.Entity("CarManufactoring.Models.SalesLine", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("CarConfigId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "CarConfigId");

                    b.HasIndex("CarConfigId");

                    b.ToTable("SalesLine");
                });

            modelBuilder.Entity("CarManufactoring.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SectionId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("CarManufactoring.Models.SectionManager", b =>
                {
                    b.Property<int>("SectionManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionManagerId"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("SectionManagerId");

                    b.HasIndex("GenderId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionManager");
                });

            modelBuilder.Entity("CarManufactoring.Models.SemiFinished", b =>
                {
                    b.Property<int>("SemiFinishedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SemiFinishedId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Manufacter")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SemiFinishedState")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SemiFinishedId");

                    b.ToTable("SemiFinished");
                });

            modelBuilder.Entity("CarManufactoring.Models.SemiFinishedCar", b =>
                {
                    b.Property<int?>("SemiFinishedId")
                        .HasColumnType("int");

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("SemiFinishedCarsId")
                        .HasColumnType("int");

                    b.HasKey("SemiFinishedId", "CarId");

                    b.HasIndex("CarId");

                    b.ToTable("SemiFinishedCar");
                });

            modelBuilder.Entity("CarManufactoring.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftId");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("Shift");
                });

            modelBuilder.Entity("CarManufactoring.Models.ShiftSchedule", b =>
                {
                    b.Property<int>("ShiftSchedulesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftSchedulesId"), 1L, 1);

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftSchedulesId");

                    b.HasIndex("CollaboratorId");

                    b.ToTable("ShiftSchedule");
                });

            modelBuilder.Entity("CarManufactoring.Models.ShiftType", b =>
                {
                    b.Property<int>("ShiftTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftTime")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftTypeSearchShiftTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftTypeId");

                    b.HasIndex("ShiftTypeSearchShiftTypeId");

                    b.ToTable("ShiftType");
                });

            modelBuilder.Entity("CarManufactoring.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("WarehouseStockId")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("WarehouseStockId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("CarManufactoring.Models.StockFinalProduct", b =>
                {
                    b.Property<int>("StockFinalProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockFinalProductId"), 1L, 1);

                    b.Property<string>("ChassiNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocalizationCarId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.HasKey("StockFinalProductId");

                    b.HasIndex("LocalizationCarId");

                    b.HasIndex("ProductionId");

                    b.ToTable("StockFinalProduct");
                });

            modelBuilder.Entity("CarManufactoring.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"), 1L, 1);

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierContact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SupplierEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierZipCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("CarManufactoring.Models.SupplierParts", b =>
                {
                    b.Property<int>("SupplierPartsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierPartsId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("SupplierPartsId");

                    b.ToTable("SupplierParts");
                });

            modelBuilder.Entity("CarManufactoring.Models.SupplierPartsCarParts", b =>
                {
                    b.Property<int>("SupplierPartsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Disponibilidade")
                        .HasColumnType("bit");

                    b.Property<int>("PrazoEntrega")
                        .HasColumnType("int");

                    b.HasKey("SupplierPartsId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SupplierPartsCarParts");
                });

            modelBuilder.Entity("CarManufactoring.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("CarManufactoring.Models.TaskType", b =>
                {
                    b.Property<int>("TaskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskTypeId"), 1L, 1);

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("TaskTypeId");

                    b.ToTable("TaskType");
                });

            modelBuilder.Entity("CarManufactoring.Models.TimeOfProduction", b =>
                {
                    b.Property<int>("TimeOfProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeOfProductionId"), 1L, 1);

                    b.Property<int>("CarConfigId")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("TimeOfProductionId");

                    b.HasIndex("CarConfigId")
                        .IsUnique();

                    b.ToTable("TimeOfProduction");
                });

            modelBuilder.Entity("CarManufactoring.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"), 1L, 1);

                    b.Property<int>("CollaboratorID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarehouseId");

                    b.HasIndex("CollaboratorID");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("CarManufactoring.Models.WarehouseProduct", b =>
                {
                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockMax")
                        .HasColumnType("int");

                    b.HasKey("WarehouseId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("WarehouseProduct");
                });

            modelBuilder.Entity("CarManufactoring.Models.WarehouseStock", b =>
                {
                    b.Property<int>("WarehouseStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseStockId"), 1L, 1);

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WarehouseStockId");

                    b.ToTable("WarehouseStock");
                });

            modelBuilder.Entity("CarManufactoring.Models.WorkerPunctuality", b =>
                {
                    b.Property<int>("WorkerPunctualityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkerPunctualityId"), 1L, 1);

                    b.Property<int?>("CollaboratorId")
                        .HasColumnType("int");

                    b.Property<int>("LateShiftsLastWeek")
                        .HasColumnType("int");

                    b.Property<int>("MissedHoursLastWeek")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkerPunctualityId");

                    b.HasIndex("CollaboratorId");

                    b.ToTable("WorkerPunctuality");
                });

            modelBuilder.Entity("CarManufactoring.Models.WorkingHours", b =>
                {
                    b.Property<int>("WorkingHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkingHoursId"), 1L, 1);

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkingHoursId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("CarManufactoring.Models.Car", b =>
                {
                    b.HasOne("CarManufactoring.Models.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CarManufactoring.Models.CarConfig", b =>
                {
                    b.HasOne("CarManufactoring.Models.Car", "Car")
                        .WithMany("CarConfigs")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarManufactoring.Models.Collaborator", b =>
                {
                    b.HasOne("CarManufactoring.Models.Gender", "Genders")
                        .WithMany("Collaborators")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.Navigation("Genders");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CarManufactoring.Models.CollaboratorShifts", b =>
                {
                    b.HasOne("CarManufactoring.Models.Collaborator", "Collaborator")
                        .WithMany("CollaboraterShift")
                        .HasForeignKey("CollaboratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Shift", "Shift")
                        .WithMany("ShiftCollaborator")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Collaborator");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("CarManufactoring.Models.ConfigList", b =>
                {
                    b.HasOne("CarManufactoring.Models.CarConfig", "CarConfig")
                        .WithMany("ConfigLists")
                        .HasForeignKey("CarConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Extra", "Extra")
                        .WithMany("ConfigLists")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarConfig");

                    b.Navigation("Extra");
                });

            modelBuilder.Entity("CarManufactoring.Models.CustomerContact", b =>
                {
                    b.HasOne("CarManufactoring.Models.Customer", "Customer")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarManufactoring.Models.InspectionAndTest", b =>
                {
                    b.HasOne("CarManufactoring.Models.Collaborator", "Collaborator")
                        .WithMany()
                        .HasForeignKey("CollaboratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Production", "Productions")
                        .WithMany()
                        .HasForeignKey("ProductionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.InspectionTestState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collaborator");

                    b.Navigation("Productions");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CarManufactoring.Models.InspectionTestsProduction", b =>
                {
                    b.HasOne("CarManufactoring.Models.InspectionAndTest", "InspectionAndTest")
                        .WithMany("Production")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Production", "Production")
                        .WithMany("InspectionTests")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InspectionAndTest");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("CarManufactoring.Models.Machine", b =>
                {
                    b.HasOne("CarManufactoring.Models.LocalizationCode", "MachineLocalizationCode")
                        .WithMany("MachineLocalization")
                        .HasForeignKey("LocalizationCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.MachineModel", "MachineModel")
                        .WithMany()
                        .HasForeignKey("MachineModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.MachineState", "MachineState")
                        .WithMany("Machines")
                        .HasForeignKey("MachineStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Section", null)
                        .WithMany("Machines")
                        .HasForeignKey("SectionId");

                    b.Navigation("MachineLocalizationCode");

                    b.Navigation("MachineModel");

                    b.Navigation("MachineState");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineAquisition", b =>
                {
                    b.HasOne("CarManufactoring.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineBudget", b =>
                {
                    b.HasOne("CarManufactoring.Models.MachineAquisition", "Aquisition")
                        .WithMany()
                        .HasForeignKey("AquisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aquisition");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineMaintenance", b =>
                {
                    b.HasOne("CarManufactoring.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Priority");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineModel", b =>
                {
                    b.HasOne("CarManufactoring.Models.MachineBrand", "MachineBrandNames")
                        .WithMany("MachineModels")
                        .HasForeignKey("MachineBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MachineBrandNames");
                });

            modelBuilder.Entity("CarManufactoring.Models.MaintenanceCollaborator", b =>
                {
                    b.HasOne("CarManufactoring.Models.Collaborator", "Collaborators")
                        .WithMany("MaintenanceCollaborators")
                        .HasForeignKey("CollaboratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.MachineMaintenance", "MaintenanceMachine")
                        .WithMany("MaintenanceCollection")
                        .HasForeignKey("MachineMaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Collaborators");

                    b.Navigation("MaintenanceMachine");
                });

            modelBuilder.Entity("CarManufactoring.Models.MaterialUsed", b =>
                {
                    b.HasOne("CarManufactoring.Models.Material", "Material")
                        .WithMany("SemiFinished")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.SemiFinished", "SemiFinished")
                        .WithMany("Material")
                        .HasForeignKey("SemiFinishedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("SemiFinished");
                });

            modelBuilder.Entity("CarManufactoring.Models.ModelParts", b =>
                {
                    b.HasOne("CarManufactoring.Models.CarConfig", "CarConfig")
                        .WithMany("CarParts")
                        .HasForeignKey("CarConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.CarParts", "CarParts")
                        .WithMany("CarConfig")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarConfig");

                    b.Navigation("CarParts");
                });

            modelBuilder.Entity("CarManufactoring.Models.Order", b =>
                {
                    b.HasOne("CarManufactoring.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.OrderState", "OrderState")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderState");
                });

            modelBuilder.Entity("CarManufactoring.Models.PriceSupplierPartsCarParts", b =>
                {
                    b.HasOne("CarManufactoring.Models.CarParts", "CarParts")
                        .WithMany("SupplierParts1")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.SupplierParts", "SupplierParts")
                        .WithMany("CarParts1")
                        .HasForeignKey("SupplierPartsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarParts");

                    b.Navigation("SupplierParts");
                });

            modelBuilder.Entity("CarManufactoring.Models.Production", b =>
                {
                    b.HasOne("CarManufactoring.Models.CarConfig", "CarConfig")
                        .WithMany()
                        .HasForeignKey("CarConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarConfig");
                });

            modelBuilder.Entity("CarManufactoring.Models.SalesLine", b =>
                {
                    b.HasOne("CarManufactoring.Models.CarConfig", "CarConfig")
                        .WithMany("Order")
                        .HasForeignKey("CarConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Order", "Order")
                        .WithMany("CarConfig")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarConfig");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CarManufactoring.Models.SectionManager", b =>
                {
                    b.HasOne("CarManufactoring.Models.Gender", "Genders")
                        .WithMany("SectionManagers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Priority", null)
                        .WithMany("MachineMaintenance")
                        .HasForeignKey("PriorityId");

                    b.HasOne("CarManufactoring.Models.Section", "Sections")
                        .WithMany("Manager")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genders");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("CarManufactoring.Models.SemiFinishedCar", b =>
                {
                    b.HasOne("CarManufactoring.Models.Car", "Car")
                        .WithMany("SemiFinisheds")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.SemiFinished", "SemiFinished")
                        .WithMany("Cars")
                        .HasForeignKey("SemiFinishedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("SemiFinished");
                });

            modelBuilder.Entity("CarManufactoring.Models.Shift", b =>
                {
                    b.HasOne("CarManufactoring.Models.ShiftType", "ShiftType")
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("CarManufactoring.Models.ShiftSchedule", b =>
                {
                    b.HasOne("CarManufactoring.Models.Collaborator", "Collaborator")
                        .WithMany()
                        .HasForeignKey("CollaboratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collaborator");
                });

            modelBuilder.Entity("CarManufactoring.Models.ShiftType", b =>
                {
                    b.HasOne("CarManufactoring.Models.ShiftType", "ShiftTypeSearch")
                        .WithMany()
                        .HasForeignKey("ShiftTypeSearchShiftTypeId");

                    b.Navigation("ShiftTypeSearch");
                });

            modelBuilder.Entity("CarManufactoring.Models.Stock", b =>
                {
                    b.HasOne("CarManufactoring.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.WarehouseStock", "WarehouseStock")
                        .WithMany("Stocks")
                        .HasForeignKey("WarehouseStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("WarehouseStock");
                });

            modelBuilder.Entity("CarManufactoring.Models.StockFinalProduct", b =>
                {
                    b.HasOne("CarManufactoring.Models.LocalizationCar", "LocalizationCar")
                        .WithMany()
                        .HasForeignKey("LocalizationCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalizationCar");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("CarManufactoring.Models.SupplierPartsCarParts", b =>
                {
                    b.HasOne("CarManufactoring.Models.CarParts", "CarParts")
                        .WithMany("SupplierParts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.SupplierParts", "SupplierParts")
                        .WithMany("CarParts")
                        .HasForeignKey("SupplierPartsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarParts");

                    b.Navigation("SupplierParts");
                });

            modelBuilder.Entity("CarManufactoring.Models.TimeOfProduction", b =>
                {
                    b.HasOne("CarManufactoring.Models.CarConfig", "CarConfig")
                        .WithOne("TimeOfProduction")
                        .HasForeignKey("CarManufactoring.Models.TimeOfProduction", "CarConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarConfig");
                });

            modelBuilder.Entity("CarManufactoring.Models.Warehouse", b =>
                {
                    b.HasOne("CarManufactoring.Models.Collaborator", "Collaborator")
                        .WithMany("Warehouses")
                        .HasForeignKey("CollaboratorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Collaborator");
                });

            modelBuilder.Entity("CarManufactoring.Models.WarehouseProduct", b =>
                {
                    b.HasOne("CarManufactoring.Models.CarParts", "CarParts")
                        .WithMany("Warehouses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarManufactoring.Models.Warehouse", "Warehouses")
                        .WithMany("CarParts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarParts");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CarManufactoring.Models.WorkerPunctuality", b =>
                {
                    b.HasOne("CarManufactoring.Models.Collaborator", null)
                        .WithMany("Evaluations")
                        .HasForeignKey("CollaboratorId");
                });

            modelBuilder.Entity("CarManufactoring.Models.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarManufactoring.Models.Car", b =>
                {
                    b.Navigation("CarConfigs");

                    b.Navigation("SemiFinisheds");
                });

            modelBuilder.Entity("CarManufactoring.Models.CarConfig", b =>
                {
                    b.Navigation("CarParts");

                    b.Navigation("ConfigLists");

                    b.Navigation("Order");

                    b.Navigation("TimeOfProduction");
                });

            modelBuilder.Entity("CarManufactoring.Models.CarParts", b =>
                {
                    b.Navigation("CarConfig");

                    b.Navigation("SupplierParts");

                    b.Navigation("SupplierParts1");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CarManufactoring.Models.Collaborator", b =>
                {
                    b.Navigation("CollaboraterShift");

                    b.Navigation("Evaluations");

                    b.Navigation("MaintenanceCollaborators");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CarManufactoring.Models.Customer", b =>
                {
                    b.Navigation("CustomerContacts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CarManufactoring.Models.Extra", b =>
                {
                    b.Navigation("ConfigLists");
                });

            modelBuilder.Entity("CarManufactoring.Models.Gender", b =>
                {
                    b.Navigation("Collaborators");

                    b.Navigation("SectionManagers");
                });

            modelBuilder.Entity("CarManufactoring.Models.InspectionAndTest", b =>
                {
                    b.Navigation("Production");
                });

            modelBuilder.Entity("CarManufactoring.Models.LocalizationCode", b =>
                {
                    b.Navigation("MachineLocalization");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineBrand", b =>
                {
                    b.Navigation("MachineModels");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineMaintenance", b =>
                {
                    b.Navigation("MaintenanceCollection");
                });

            modelBuilder.Entity("CarManufactoring.Models.MachineState", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("CarManufactoring.Models.Material", b =>
                {
                    b.Navigation("SemiFinished");
                });

            modelBuilder.Entity("CarManufactoring.Models.Order", b =>
                {
                    b.Navigation("CarConfig");
                });

            modelBuilder.Entity("CarManufactoring.Models.OrderState", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CarManufactoring.Models.Priority", b =>
                {
                    b.Navigation("MachineMaintenance");
                });

            modelBuilder.Entity("CarManufactoring.Models.Production", b =>
                {
                    b.Navigation("InspectionTests");
                });

            modelBuilder.Entity("CarManufactoring.Models.Section", b =>
                {
                    b.Navigation("Machines");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CarManufactoring.Models.SemiFinished", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("CarManufactoring.Models.Shift", b =>
                {
                    b.Navigation("ShiftCollaborator");
                });

            modelBuilder.Entity("CarManufactoring.Models.ShiftType", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("CarManufactoring.Models.SupplierParts", b =>
                {
                    b.Navigation("CarParts");

                    b.Navigation("CarParts1");
                });

            modelBuilder.Entity("CarManufactoring.Models.Warehouse", b =>
                {
                    b.Navigation("CarParts");
                });

            modelBuilder.Entity("CarManufactoring.Models.WarehouseStock", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
